#define key #p4#
#define velocity #p5#
#define partial #p6#

opcode plug, a, jjoj

iSourceModule, iNumberOfPartials, iPartial, iNote xin

if iNote == -1 then

midinoteonkey $key, $velocity

iNote += 1

endif

iDestinationModule = int ( p1 )

if iSourceModule == -1 then

SSourceModuleLocator sprintf "destination/%d", iDestinationModule

iSourceModule chnget SSourceModuleLocator

endif

if iNumberOfPartials == -1 then

SNumberOfPartialsLocator sprintf "Partials/%d", iSourceModule

iNumberOfPartials chnget SNumberOfPartialsLocator

if iNumberOfPartials == 0 then

iNumberOfPartials = 1
iPartial = $partial

endif

endif

aOutput subinstr iSourceModule, $key, $velocity, $partial

aOutput = aOutput / iNumberOfPartials

iPartial += 1

if iPartial < iNumberOfPartials then

aRemainingPartialsOutput plug iSourceModule, iNumberOfPartials, iPartial, iNote

aOutput += aRemainingPartialsOutput

endif

SdestinationModule nstrstr iDestinationModule
SSourceModule nstrstr iSourceModule

xout aOutput

endop
